//This script illustrates the elevation in and around the collection sites
//The dataset used in the study was collected and compiled by the USGS
//Add elevation dataset to map
var dataset = ee.Image('USGS/SRTMGL1_003');
//define an elevation variable
var elevation = dataset.select('elevation');
//define a slope variable.
var slope = ee.Terrain.slope(elevation);

//option to view slope
//Map.addLayer(slope, {min: 0, max: 60}, 'slope');

//option to view elevation unmasked
//Map.addLayer(elevation, {min: 0, max: 3600}, 'elevation');

//This script illustrates the collection points
var yalepoint = ee.Geometry.Point([-72.114899 , 41.954655]);
var dartmouthpoint = ee.Geometry.Point([ -72.249659 , 43.736577]);
var smithpoint = ee.Geometry.Point([ -72.680123 , 42.447682]);

//Take point geometries and turn them into circles with 10 km radius
var yalecircle = yalepoint.buffer(10000,1);
var dartmouthcircle = dartmouthpoint.buffer(10000,1);
var smithcircle = smithpoint.buffer(10000,1);

//Turn circle geomtries into a list of features

var features = [
ee.Feature(yalecircle),
ee.Feature(dartmouthcircle),
ee.Feature(smithcircle),
];

// Create a FeatureCollection from the list and print it.
var mask = ee.FeatureCollection(features);

// Set center of display
Map.centerObject(mask, 7);

//Filter data by date so the pixel limit is not exceded

//var col2 = coll.filterDate('2050-01-01', '2051-01-01');

// Reduce the image to get a one-band maximum value image.
//var maxValue = col2.reduce(ee.Reducer.max());

// Load the collection of the country boundaries
var country =ee.FeatureCollection('USDOS/LSIB/2013');

// Mask the elevation image
var elevationmask = elevation.clip(country.filter(ee.Filter.eq('cc', 'US')));

// Set the visualization parameters
var visParams1 = {
  min: 0,
  max: 3600,
  palette: [
    'black','white'
  ],
};

//Add the elevation image to map
Map.addLayer(
    elevationmask, visParams1,
    'elevation USA');
    
// This section adds the outline of the collection areas
// Inspired by https://developers.google.com/earth-engine/guides/feature_collections_visualizing
// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// outline the study areas
var outline = empty.paint({
  featureCollection: mask,
  color: 1,
  width: 3
});

//Add layer to map
Map.addLayer(outline, {palette: 'f5f7e2'}, 'edges');

// Add a legend
// process to add legend from
// https://mygeoblog.com/2016/12/09/add-a-legend-to-to-your-gee-map/
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Elevation',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Define the palette for the colors
var palette =['000000','FFFFFF'];
 
// Define the name of the colors for the legend
var names = [
  'Low',
  'High'];
 
// Add color and and names
for (var i = 0; i < 2; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// Add legend to map
Map.add(legend);
